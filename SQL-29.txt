CREATE TABLE salesman (
  salesman_id INTEGER PRIMARY KEY,
  name VARCHAR(50) NOT NULL,
  city VARCHAR(50) NOT NULL,
  commission DECIMAL (10,2)
);

INSERT INTO salesman VALUES (5001, 'James Hoog', 'New York', 0.15);
INSERT INTO salesman VALUES (5002, 'Nail Knite', 'Paris', 0.13);
INSERT INTO salesman VALUES (5005, 'Pit Alex','London', 0.11);
INSERT INTO salesman VALUES (5006, 'Mc Lyon', 'Paris', 0.14);
INSERT INTO salesman VALUES (5007, 'Paul Adam', 'Rome', 0.13);
INSERT INTO salesman VALUES (5003, 'Lauson Hen', 'San Jose', 0.12);


CREATE TABLE customer (
  customer_id INTEGER PRIMARY KEY,
  cust_name VARCHAR(50) NOT NULL,
  city VARCHAR(50) NOT NULL,
  grade INTEGER,
  salesman_id INTEGER
);

INSERT INTO customer VALUES (3002, 'Nick Rimando' ,'New York',  100 ,5001);
INSERT INTO customer VALUES (3007, 'Brad Davis',  'New York' , 200, 5001);
INSERT INTO customer VALUES (3005, 'Graham Zusi', 'California' ,200 ,5002);
INSERT INTO customer VALUES (3008 ,'Julian Green', 'London' , 300, 5002);
INSERT INTO customer VALUES (3004, 'Fabian Johnson' ,'Paris' , 300, 5006);
INSERT INTO customer VALUES (3009, 'Geoff Cameron', 'Berlin',  100, 5003);
INSERT INTO customer VALUES (3003 ,'Jozy Altidor', 'Moscow', 200,  5007);
INSERT INTO customer VALUES (3001, 'Brad Guzan', 'London' , ' ' , 5005);


CREATE TABLE orders (
  ord_no INTEGER PRIMARY KEY,
  purch_amt INTEGER,
  ord_date date,
  customer_id INTEGER,
  salesman_id DECIMAL (10,2)
);

INSERT INTO orders VALUES (70001, 150.5, '2012-10-05', 3005, 5002);
INSERT INTO orders VALUES (70009, 270.65, '2012-09-10', 3001, 5005);
INSERT INTO orders VALUES (70002, 65.26, '2012-10-05' ,3002, 5001);
INSERT INTO orders VALUES (70004, 110.5, '2012-08-17', 3009, 5003);
INSERT INTO orders VALUES (70007, 948.5, '2012-09-10', 3005, 5002);
INSERT INTO orders VALUES (70005, 2400.6, '2012-07-27', 3007, 5001);
INSERT INTO orders VALUES (70008, 5760, '2012-09-10', 3002, 5001);
INSERT INTO orders VALUES (70010, 1983.43, '2012-10-10', 3004, 5006);
INSERT INTO orders VALUES (70003, 2480.4, '2012-10-10', 3009, 5003);
INSERT INTO orders VALUES (70012, 250.45, '2012-06-27', 3008, 5002);
INSERT INTO orders VALUES (70011, 75.29, '2012-08-17', 3003, 5007);
INSERT INTO orders VALUES (70013, 3045.6, '2012-04-25', 3002, 5001);


CREATE TABLE company_mast (
  com_id INTEGER PRIMARY KEY,
  com_name VARCHAR(50) NOT NULL
);

INSERT INTO company_mast VALUES (11, 'Samsung');
INSERT INTO company_mast VALUES (12, 'iBall');
INSERT INTO company_mast VALUES (13, 'Epsion');
INSERT INTO company_mast VALUES (14, 'Zebronics');
INSERT INTO company_mast VALUES (15, 'Asus');
INSERT INTO company_mast VALUES (16, 'Frontech');


CREATE TABLE item_mast (
	pro_id INTEGER PRIMARY KEY,
	pro_name VARCHAR(50) NOT NULL,
	pro_price INTEGER NOT NULL,
	pro_com INTEGER 
);

INSERT INTO item_mast VALUES (101, 'Mother Board', 3200.00, 15);
INSERT INTO item_mast VALUES (102, 'Key Board', 450.00, 16);
INSERT INTO item_mast VALUES (103, 'ZIP drive', 250.00, 14);
INSERT INTO item_mast VALUES (104, 'Speaker', 550.00, 16);
INSERT INTO item_mast VALUES (105, 'Monitor', 5000.00, 11);
INSERT INTO item_mast VALUES (106, 'DVD drive', 900.00, 12);
INSERT INTO item_mast VALUES (107, 'CD drive', 800.00, 12);
INSERT INTO item_mast VALUES (108, 'Printer', 2600.00, 13);
INSERT INTO item_mast VALUES (109, 'Refill cartridge', 350.00, 13);
INSERT INTO item_mast VALUES (110, 'Mouse', 250.00, 12);


CREATE TABLE emp_department (
	DPT_CODE INTEGER PRIMARY KEY,
	DPT_NAME VARCHAR (50),
	DPT_ALLOTMENT INTEGER NOT NULL
); 

INSERT INTO emp_department VALUES (57, 'IT', 65000),
INSERT INTO emp_department VALUES (63, 'Finance', 15000),
INSERT INTO emp_department VALUES (47, 'HR', 240000),
INSERT INTO emp_department VALUES (27, 'RD', 55000),
INSERT INTO emp_department VALUES (89, 'QC', 75000);


CREATE TABLE emp_details(
	EMP_IDNO INTEGER PRIMARY KEY,
	EMP-FNAME VARCHAR (50) NOT NULL,
	EMP-LNAME VARCHAR (50),
	EMP_DEPT INTEGER NOT NULL
);

INSERT INTO emp_details VALUES (127323, 'Michale', 'Robbin', 57),
INSERT INTO emp_details VALUES (526689, 'Carlos', 'Snares', 63),
INSERT INTO emp_details VALUES (843795, 'Enric','Dosio', 57),
INSERT INTO emp_details VALUES (328717, 'Jhon','Snares', 63),
INSERT INTO emp_details VALUES (444527, 'Joseph','Dosni', 47),
INSERT INTO emp_details VALUES (659831, 'Zanifer', 'Emily', 47),
INSERT INTO emp_details VALUES (847674, 'Kuleswar', 'Sitaraman', 57),
INSERT INTO emp_details VALUES (748681, 'Henrey', 'Gabriel', 47),
INSERT INTO emp_details VALUES (555935, 'Alex', 'Manuel', 57),
INSERT INTO emp_details VALUES (539569, 'George', 'Mardy', 27),
INSERT INTO emp_details VALUES (733843, 'Mario', 'Saule', 63),
INSERT INTO emp_details VALUES (631548, 'Alan', 'Snappy', 27),
INSERT INTO emp_details VALUES (839139, 'Maria', 'Foster', 57);


-- 1. From the following tables write a SQL query to find the salesperson and customer who reside in the same city.
-- Return Salesman, cust_name and city. 

SELECT s.name, c.cust_name, c.city
FROM customer c
INNER JOIN salesman s ON C.CITY = s.CITY;


-- 2. From the following tables write a SQL query to find those orders where the order amount exists between 500 and 2000.
-- Return ord_no, purch_amt, cust_name, city.

SELECT o.ord_no, o.purch_amt, c.cust_name, c.city
FROM orders o
INNER JOIN customer c ON o.customer_id = c.customer_id
WHERE o.purch_amt BETWEEN 500 AND 2000;


-- 3. From the following tables write a SQL query to find the salesperson(s) and the customer(s) he represents.
-- Return Customer Name, city, Salesman, commission. 

SELECT c.cust_name AS "Customer Name", s.name AS "Salesman", c.city, s.commission
FROM customer c
LEFT OUTER JOIN salesman s ON c.salesman_id = s.salesman_id;


-- 4. From the following tables write a SQL query to find salespeople
-- who received commissions of more than 12 percent from the company.
-- Return Customer Name, customer city, Salesman, commission.   

SELECT c.cust_name, c.city, s.name, s.commission
FROM customer c
LEFT OUTER JOIN salesman s ON c.salesman_id = s.salesman_id
WHERE commission > 0.12;


-- 5. From the following tables write a SQL query to locate those salespeople who do not live in the same city
-- where their customers live and have received a commission of more than 12% from the company.
-- Return Customer Name, customer city, Salesman, salesman city, commission. 

SELECT c.cust_name, c.city, s.name, s.commission
FROM customer c
LEFT OUTER JOIN salesman s ON c.salesman_id = s.salesman_id
WHERE commission > 0.12 
AND s.city != c.city;


-- 6. From the following tables write a SQL query to find the details of an order.
-- Return ord_no, ord_date, purch_amt, Customer Name, grade, Salesman, commission.

SELECT o.ord_no, o.ord_date, o.purch_amt, c.cust_name, s.name, s.commission
FROM orders o
INNER JOIN salesman s ON o.salesman_id = s.salesman_id
INNER JOIN customer c ON o.customer_id = c.customer_id
ORDER BY ord_no ASC;


-- 7. Write a SQL statement to join the tables salesman, customer and orders so
-- that the same column of each table appears once and only the relational rows are returned.

SELECT DISTINCT *
FROM orders
NATURAL JOIN customer 
NATURAL JOIN salesman;


-- 8. From the following tables write a SQL query to display the customer name, customer city, grade, salesman, salesman city.
-- The results should be sorted by ascending customer_id.

SELECT c.cust_name, c.city, c.grade, s.name, s.city
FROM customer c
INNER JOIN salesman s ON c.salesman_id = s.salesman_id
ORDER BY c.customer_id ASC;


-- 9. From the following tables write a SQL query to find those customers with a grade less than 300.
-- Return cust_name, customer city, grade, Salesman, salesmancity.
-- The result should be ordered by ascending customer_id.

SELECT c.cust_name, c.city, c.grade, s.name, s.city
FROM customer c
INNER JOIN salesman s ON c.salesman_id = s.salesman_id
WHERE grade < 300
ORDER BY c.customer_id ASC;


-- 10. Write a SQL statement to make a report with customer name, city, order number, order date, and order amount
-- in ascending order according to the order date to determine whether any of the existing customers have placed an order or not. 

SELECT c.cust_name, c.city, o.ord_no, o.ord_date, o.purch_amt
FROM orders o
LEFT JOIN customer c ON c.customer_id = o.customer_id
ORDER BY ord_no;


-- 11. SQL statement to generate a report with customer name, city, order number, order date, order amount,
-- salesperson name, and commission to determine if any of the existing customers have not placed orders
-- or if they have placed orders through their salesman or by themselves.

SELECT c.cust_name, c.city, o.ord_no, o.ord_date, o.purch_amt, s.name, s.commission
FROM orders o
LEFT JOIN customer c ON o.customer_id = c.customer_id
LEFT JOIN salesman s ON o.salesman_id = s.Salesman_id;


-- 12. Write a SQL statement to generate a list in ascending order of salespersons
-- who work either for one or more customers or have not yet joined any of the customers.

SELECT s.name, c.cust_name
FROM customer c
Right JOIN salesman s ON c.salesman_id = s.salesman_id
ORDER BY s.salesman_id;


-- 13. From the following tables write a SQL query to list all salespersons along with
-- customer name, city, grade, order number, date, and amount.

SELECT s.name, c.cust_name, c.city, c.grade, o.ord_no, o.ord_date, o.purch_amt
FROM salesman s
LEFT JOIN orders o ON s.salesman_id = o.salesman_id
LEFT JOIN customer c ON o.customer_id = c.customer_id;


-- 14. Write a SQL statement to make a list for the salesmen who either work for one or more customers
-- or yet to join any of the customer. The customer may have placed, either one or more orders on
-- or above order amount 2000 and must have a grade, or he may not have placed any order to the associated supplier.

SELECT s.name
FROM salesman s
LEFT JOIN customer c ON s.salesman_id = c.salesman_id
LEFT JOIN orders o ON c.customer_id = o.customer_id
WHERE o.purch_amt >= 2000
AND grade IS NOT NULL;


-- 15.For those customers from the existing list who put one or more orders,
-- or which orders have been placed by the customer who is not on the list
-- create a report containing the customer name, city, order number, order date, and purchase amount.

SELECT c.cust_name, c.city, o.ord_no, o.ord_date, o.purch_amt
FROM orders o
RIGHT JOIN customer c ON o.customer_id = c.customer_id;


-- 16. Write a SQL statement to generate a report with the customer name, city, order no. order date, purchase amount
-- for only those customers on the list who must have a grade and placed one or
-- more orders or which order(s) have been placed by the customer who neither is on the list nor has a grade. 

SELECT c.cust_name, c.city, o.ord_no, o.ord_date, o.purch_amt
FROM orders o
FULL JOIN customer c ON o.customer_id = c.customer_id
AND c.grade IS NOT NULL;
	  
	  
-- 17. Write a SQL query to combine each row of the salesman table with each row of the customer table.

SELECT s.name AS "Salesman", c.cust_name AS "Customer Name"
FROM salesman s
CROSS JOIN customer c;


-- 18. Write a SQL statement to create a Cartesian product between salesperson and customer,
-- i.e. each salesperson will appear for all customers and vice versa for that salesperson who belongs to that city.

SELECT s.name AS "Salesman", c.cust_name AS "Customer Name"
FROM salesman s
CROSS JOIN customer c
WHERE s.city IS NOT NULL;


-- 19. Write a SQL statement to create a Cartesian product between salesperson and customer,
-- i.e. each salesperson will appear for every customer and vice versa for those salesmen
-- who belong to a city and customers who require a grade.

SELECT s.name AS "Salesman", c.cust_name AS "Customer Name"
FROM salesman s
CROSS JOIN customer c
WHERE s.city IS NOT NULL
AND c.grade IS NOT NULL;
	
	
-- 20. Write a SQL statement to make a Cartesian product between salesman and customer
-- i.e. each salesman will appear for all customers and vice versa for those salesmen
-- who must belong to a city which is not the same as his customer and the customers should have their own grade.

SELECT s.name AS "Salesman", c.cust_name AS "Customer Name"
FROM salesman s
CROSS JOIN customer c
WHERE s.city IS NOT NULL
AND s.city != c.city
AND c.grade IS NOT NULL;


-- 21. From the following tables write a SQL query to select all rows from both participating tables
-- as long as there is a match between pro_com and com_id.

SELECT *
FROM item_mast i
INNER JOIN company_mast c ON i.pro_com = c.com_id;


-- 22. Write a SQL query to display the item name, price, and company name of all the products. 

SELECT i.pro_name, i.pro_price, c.com_name
FROM item_mast i
INNER JOIN company_mast c ON i.pro_com = c.com_id;


-- 23. From the following tables write a SQL query to calculate the average price of items of each company.
-- Return average value and company name.

SELECT c.com_name, AVG(i.pro_price)
FROM item_mast i
INNER JOIN company_mast c ON i.pro_com = c.com_id
GROUP BY c.com_name;


-- 24. From the following tables write a SQL query to calculate and find the average price of items
-- of each company higher than or equal to Rs. 350.
-- Return average value and company name.

SELECT c.com_name, AVG(i.pro_price)
FROM item_mast i
INNER JOIN company_mast c ON i.pro_com = c.com_id
GROUP BY c.com_name
HAVING AVG(i.pro_price) >= 350;


-- 25. From the following tables write a SQL query to find the most expensive product of each company.
-- Return pro_name, pro_price and com_name.

SELECT i.pro_name, i.pro_price, c.com_name
FROM item_mast i
INNER JOIN company_mast c ON i.pro_com = c.com_id
AND i.pro_price = (SELECT MAX(i.pro_price)
				  FROM item_mast i
				  WHERE i.pro_com = c.com_id);


-- 26. From the following tables write a SQL query to display all the data of employees including their department.

SELECT *
FROM emp_details e_det
INNER JOIN emp_department e_dep ON e_det.emp_dept = e_dep.dpt_code;


-- 27. From the following tables write a SQL query to display the first and last names of each employee,
-- as well as the department name and sanction amount.

SELECT e_det.emp_fname AS "First Name", e_det.emp_lname AS "Last Name",
		e_dep.dpt_name AS "Department Name", e_dep.dpt_allotment AS "Amount Allotted"
FROM emp_details e_det
INNER JOIN emp_department e_dep ON e_det.emp_dept = e_dep.dpt_code;


-- 28. From the following tables write a SQL query to find the departments with budgets more than Rs.50000
-- and display the first name and last name of employees.

SELECT e_det.emp_fname AS "First Name", e_det.emp_lname AS "Last Name", e_dep.dpt_allotment
FROM emp_details e_det
INNER JOIN emp_department e_dep ON e_det.emp_dept = e_dep.dpt_code
AND e_dep.dpt_allotment > 50000;


-- 29. From the following tables write a SQL query to find the names of departments
-- where more than two employees are employed. Return dpt_name.

SELECT e_dep.dpt_name
FROM emp_department e_dep
INNER JOIN emp_details e_det ON e_dep.dpt_code = e_det.emp_dept
GROUP BY e_dep.dpt_code
HAVING COUNT(e_dep.dpt_code)>2;
